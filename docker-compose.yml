version: '3'

services:

  postgres:
    container_name: postgres
    # image: postgres:13-alpine
    image: galien0xffffff/postgres-debugger:14
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - DB_ANON_ROLE=${DB_ANON_ROLE}
      - DB_SCHEMA=${DB_SCHEMA}
    volumes:
      # anything in initdb directory is created in the database
      # see "How to extend this image" section at https://hub.docker.com/r/_/postgres/
      - "./initdb:/docker-entrypoint-initdb.d"
      - "./pgdata:/var/lib/postgresql/data"
    restart: always

  nginx:
    container_name: nginx
    image: nginx:mainline-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "./html:/usr/share/nginx/html"
      - "./config/nginx:/etc/nginx/conf.d"
      - "./config/certbot/conf:/etc/letsencrypt"
      - "./config/certbot/www:/var/www/certbot"
    restart: always
    extra_hosts:
      - "host.docker.internal:host-gateway"

#  certbot:
#    image: certbot/certbot
#    volumes:
#        - "./config/certbot/conf:/etc/letsencrypt"
#        - "./config/certbot/www:/var/www/certbot"

  postgrest:
    container_name: postgrest
    image: postgrest/postgrest:latest
    # ports:
    #  - "3000:3000"
    # Available environment variables documented here:
    # https://postgrest.org/en/latest/configuration.html#environment-variables
    environment:
      # The standard connection URI format, documented at
      # https://www.postgresql.org/docs/current/static/libpq-connect.html#LIBPQ-CONNSTRING
      - PGRST_DB_URI=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      # The name of which database schema to expose to REST clients
      - PGRST_DB_SCHEMA=${DB_SCHEMA}
      # The database role to use when no client authentication is provided
      - PGRST_DB_ANON_ROLE=${DB_ANON_ROLE}
      # Overrides the base URL used within the OpenAPI self-documentation hosted at the API root path
      - PGRST_LOG_LEVEL=info
      - PGRST_OPENAPI_SECURITY_ACTIVE=true
      - PGRST_OPENAPI_SERVER_PROXY_URI=https://${DOMAIN}/api
      - PGRST_JWT_SECRET=@/run/secrets/jwt_secret
      - PGRST_ROLE_CLAIM_KEY=.resource_access.frontend.roles[0]
    restart: always
    depends_on:
      - postgres
    volumes:
      - ./config/postgrest/keys.json:/run/secrets/jwt_secret

  swagger-ui:
    container_name: swagger-ui
    image: swaggerapi/swagger-ui:latest
    # ports:
    #  - "8080:8080"
    environment:
      - API_URL=https://${DOMAIN}/api
    restart: always
    depends_on:
      - postgrest

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin4
    restart: always
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PG_ADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PG_ADMIN_PASSWORD}
    volumes:
      - pgadmin-data:/var/lib/pgadmin

  keycloak:
    image: quay.io/keycloak/keycloak:19.0.3
    container_name: keycloak
    command: "start-dev --import-realm --features-disabled=admin2 --proxy edge --hostname-url=https://${DOMAIN}/auth --hostname-admin-url=https://${DOMAIN}/auth"
    environment:
      DB_VENDOR: POSTGRES
      DB_ADDR: postgres
      DB_DATABASE: keycloak
      DB_USER: ${POSTGRES_USER}
      DB_SCHEMA: public
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
    depends_on:
      - postgres
    volumes:
      - ./config/keycloak/import:/opt/keycloak/data/import

volumes:
  pgdata:
    external: true
  pgadmin-data:
     external: true
